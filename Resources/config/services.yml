services:
    itf.admin.factory:
        class: ITF\AdminBundle\Admin\AdminFactory

    itf.admin_helper:
        class:        ITF\AdminBundle\Admin\AdminHelper
        arguments:    [ "@doctrine.orm.entity_manager", "@service_container" ]

    itf.admin.config:
        class: ITF\AdminBundle\Admin\Configuration
        arguments: [ @service_container ]

    itf.admin.form.helper:
        class: ITF\AdminBundle\Admin\Form\FormHelper
        arguments: [ @service_container ]

    itf.admin.annotation_reader:
        class: ITF\AdminBundle\Admin\AnnotationReader

    itf.admin.tree:
        class: ITF\AdminBundle\Admin\Tree\Tree
        arguments: [ @service_container ]

#    itf.admin.gedmo.tree.form:
#        class: ITF\AdminBundle\Admin\Tree\GedmoTreeForm
#        #arguments: [ @itf.admin_helper ]

    itf.admin.asset:
        class: ITF\AdminBundle\Admin\Upload\Asset
        arguments: [ @service_container ]


    # listener
    itf.listener.orm.logger:
        class: ITF\AdminBundle\EventListener\LoggingListener
        calls:
            - [ setContainer, [ @service_container ] ]
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    itf.listener.orm.tree:
        class: ITF\AdminBundle\EventListener\SelectizeTreeListener
        calls:
            - [ setContainer, [ @service_container ] ]
        tags:
            - { name: doctrine.event_subscriber, connection: default }


    # form
    itf.admin.form.type.fineuploader:
        class: ITF\AdminBundle\Form\Type\FineuploaderType
        calls:
            - [ setContainer, [ @service_container ] ]
        tags:
            - { name: form.type, alias: fineuploader }

    itf.admin.form.type.fineuploader_multiple:
        class: ITF\AdminBundle\Form\Type\FineuploaderMultipleType
        calls:
            - [ setContainer, [ @service_container ] ]
        tags:
            - { name: form.type, alias: fineuploader_multiple }

    itf.admin.form.type.selectize:
        class: ITF\AdminBundle\Form\Type\SelectizeType
        #calls:
        #    - [ setContainer, [ @service_container ] ]
        tags:
            - { name: form.type, alias: selectize }

    itf.admin.form.type.selectize.tree:
        class: ITF\AdminBundle\Form\Type\SelectizeTreeType
        calls:
            - [ setContainer, [ @service_container ] ]
        tags:
            - { name: form.type, alias: selectize_tree }

    itf.admin.form.type.selectize.tags:
        class: ITF\AdminBundle\Form\Type\SelectizeTagType
        #calls:
        #    - [ setContainer, [ @service_container ] ]
        tags:
            - { name: form.type, alias: selectize_tags }

    # KernelRequest listener
    extension.listener:
        class: ITF\AdminBundle\EventListener\DoctrineExtensionListener
        calls:
            - [ setContainer, [ @service_container ] ]
        tags:
            # translatable sets locale after router processing
            - { name: kernel.event_listener, event: kernel.request, method: onLateKernelRequest, priority: -10 }

            # translatable sets locale such as default application locale before command execute
            - { name: kernel.event_listener, event: console.command, method: onConsoleCommand, priority: -10 }

    gedmo.listener.translatable:
        class: Gedmo\Translatable\TranslatableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]
            - [ setDefaultLocale, [ %locale% ] ]
            - [ setTranslationFallback, [ false ] ]

    gedmo.listener.sluggable:
        class: Gedmo\Sluggable\SluggableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    gedmo.listener.tree:
        class: Gedmo\Tree\TreeListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]