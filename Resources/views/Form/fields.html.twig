{% block fineuploader_widget %}
    {# check if id set #}
    {% if fn_entity_id == 0 %}
        <br><i class="fa fa-info-circle"></i> You have to save this entry first to upload images. Press "Create" and start uploading.
    {% else %}

        {# assets: default #}
        {% if fn_template == 'default' %}
            <link rel="stylesheet" href="{{ asset('bundles/itfadmin/plugins/fineuploader/5.4.1/fine-uploader-new.css') }}" />
            {{ include('@ITFAdmin/Form/fineuploader/default.html.twig') }}

        {# assets: gallery #}
        {% elseif fn_template == 'gallery' %}
            <link rel="stylesheet" href="{{ asset('bundles/itfadmin/plugins/fineuploader/5.4.1/fine-uploader-gallery.css') }}" />
            {{ include('@ITFAdmin/Form/fineuploader/gallery.html.twig') }}
        {% endif %}

        <script src="{{ asset('bundles/itfadmin/plugins/fineuploader/5.4.1/jquery.fine-uploader.js') }}"></script>

        {# wrapper #}
        <div id="fine-uploader"></div>

        {# generate paths #}
        <script>
            if (typeof session_path === 'undefined') {
                var session_path = '{{ path('admin_upload_fineuploader_list', { bundle: fn_bundle, entity: fn_entity, property: fn_property, id: fn_entity_id }) }}';
            }

            if (typeof request_path === 'undefined') {
                var request_path = '{{ path('admin_upload_fineuploader_upload', { bundle: fn_bundle, entity: fn_entity, property: fn_property, id: fn_entity_id }) }}';
            }

            if (typeof delete_path === 'undefined') {
                var delete_path = '{{ path('admin_upload_fineuploader_delete', { bundle: fn_bundle, entity: fn_entity, property: fn_property, id: fn_entity_id }) }}';
            }
        </script>

        {# script #}
        <script>
            var fn_file_limit = {{ fn_file_limit }},
                multiple = false,
                fn_files = [],
                fineuploader_wrapper = $('#fine-uploader');

            // multiple
            if (fn_file_limit > 1) multiple = true;

            var uploader = fineuploader_wrapper.fineUploader({
                debug: true,
                autoUpload: true,
                multiple: multiple,
                session: {
                    endpoint: session_path
                },
                request: {
                    endpoint: request_path
                },
                deleteFile: {
                    enabled: false
                },
                retry: {
                    enableAuto: false
                },
                validation: {
                    itemLimit: fn_file_limit,
                    acceptFiles: '{{ _constraints.mimeTypes }}',
                    allowedExtensions: JSON.parse('{{ allowed_extensions|json_encode|raw }}'),
                    sizeLimit: '{{ _constraints.maxSize }}',
                    image: {
                        minHeight: '{{ _constraints.minHeight }}',
                        maxHeight: '{{ _constraints.maxHeight }}',
                        minWidth: '{{ _constraints.minWidth }}',
                        maxWidth: '{{ _constraints.maxWidth }}'
                    }
                },
                callbacks: {
                    onComplete: function(id, name, responseJSON, xhr) {
                        if (responseJSON.success == true) {
                            fn_files[id] = responseJSON;
                        } else {
                            alert(responseJSON.error);
                        }

                        console.log(fn_files);
                    },
                    onDelete: function(id) {
                        console.log({info: fn_files[id]});
                        this.setDeleteFileParams({info: fn_files[id]}, id);
                    },
                    onSessionRequestComplete: function(response, success, xhr) {
                        fn_files = response;
                    },
                    onError: function(id, name, errorReason, xhr) {
                        /*alert(err)*/
                    }
                }
            });

            // getRemainingAllowedItems ()

            fineuploader_wrapper.on('click', '.qq-upload-delete', function(e) {
                var target = $(e.target).closest('li'),
                    index = target.index();

                // config
                var config = fn_files[ index ];

                console.log(fn_files);
                console.log('config.name', config.name);
                console.log('index', index);

                $.ajax({
                    url: delete_path,
                    data: {
                        filename: config.name
                    },
                    cache: false,
                    method: 'DELETE',
                    //contentType: 'json',
                    beforeSend: function() {},
                    success: function(result) {
                        if (result.success == true) {
                            uploader.fineUploader('cancel', index);
                        } else {

                        }
                    },
                    error: function() {
                        console.error('error deleting');
                    }
                })
            });

            //console.log('allowed', );

            /*qq(document.getElementById("trigger-upload")).attach("click", function() {
                uploader.uploadStoredFiles();
            });*/
        </script>
    {% endif %}

{% endblock %}

{% block fineuploader_multiple_widget %}

    <script>
        var session_path = '{{ path('admin_upload_fineuploader_list', {
            bundle: fn_bundle,
            entity: fn_entity,
            property: fn_entity_property,
            id: fn_entity_id,
            fk_entity: fn_fk_entity,
            fk_bundle: fn_fk_bundle
        }) }}';

        var request_path = '{{ path('admin_upload_fineuploader_upload', {
            bundle: fn_bundle,
            entity: fn_entity,
            property: fn_entity_property,
            id: fn_entity_id,
            fk_entity: fn_fk_entity,
            fk_bundle: fn_fk_bundle
        }) }}';

        var delete_path = '{{ path('admin_upload_fineuploader_delete', {
            bundle: fn_bundle,
            entity: fn_entity,
            property: fn_entity_property,
            id: fn_entity_id,
            fk_entity: fn_fk_entity,
            fk_bundle: fn_fk_bundle
        }) }}';
    </script>

    {{ block('fineuploader_widget') }}
{% endblock %}

{% block selectize_widget %}
    {%- if required and placeholder is none and not placeholder_in_choices and not multiple -%}
        {% set required = false %}
    {%- endif -%}
    <select {{ block('widget_attributes') }}{% if multiple %} multiple="multiple"{% endif %}>
        {%- if placeholder is not none -%}
            <option value=""{% if required and value is empty %} selected="selected"{% endif %}>{{ placeholder != '' ? placeholder|trans({}, translation_domain) }}</option>
        {%- endif -%}
        {%- if preferred_choices|length > 0 -%}
            {% set options = preferred_choices %}
            {{- block('choice_widget_options') -}}
            {%- if choices|length > 0 and separator is not none -%}
                <option disabled="disabled">{{ separator }}</option>
            {%- endif -%}
        {%- endif -%}
        {%- set options = choices -%}
        {{- block('choice_widget_options') -}}
    </select>
{% endblock %}

{% block selectize_tree_widget %}
    {%- set type = type|default('text') -%}

    <input type="{{ type }}" {{ block('widget_attributes') }} {% if value is not empty %}value="{{ value }}" {% endif %}/>
{% endblock %}

{% block selectize_tags_widget %}
    {{ block('selectize_tree_widget') }}
{% endblock %}

{% block selectize_multiple_widget %}
    {{ block('selectize_tree_widget') }}
{% endblock %}

{% block selectize_suggest_widget %}
    {%- set type = type|default('text') -%}

    {#{{ dump() }}#}

    <select {{ block('widget_attributes') }} placeholder="Search...">
        {% if data is not null and selectize.entity is not null %}
            {#<option value="{{ data }}">{{ attribute(data, 'label') }}</option>#}
            <option value="{{ attribute(data, 'id') }}">{{ attribute(selectize.entity, selectize.searchfield_method) }}</option>
        {% endif %}
    </select>
{% endblock %}